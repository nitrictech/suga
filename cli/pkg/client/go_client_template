// Code generated by Suga SDK generator. DO NOT EDIT.

package {{.Package}}

import (
	"fmt"
	"os"

	{{ if .Buckets }}
	storagepb "github.com/nitrictech/suga/proto/storage/v2"
	{{ end }}

	"github.com/nitrictech/suga/client/go/suga"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

{{range $bucket := .Buckets}}
// {{$bucket.PascalCase}}Bucket provides access to bucket '{{$bucket.Unmodified}}'
type {{$bucket.PascalCase}}Bucket struct {
	bucket *suga.Bucket
}

{{range $bucket.Permissions}}
{{if eq . "read"}}
// Read reads a file from the bucket
func (b *{{$bucket.PascalCase}}Bucket) Read(key string) ([]byte, error) {
	return b.bucket.Read(key)
}
{{end}}
{{if eq . "write"}}
// Write writes data to the bucket
func (b *{{$bucket.PascalCase}}Bucket) Write(key string, data []byte) error {
	return b.bucket.Write(key, data)
}
{{end}}
{{if eq . "delete"}}
// Delete deletes a file from the bucket
func (b *{{$bucket.PascalCase}}Bucket) Delete(key string) error {
	return b.bucket.Delete(key)
}
{{end}}
{{end}}

// List files in the bucket with a given prefix (always available)
func (b *{{$bucket.PascalCase}}Bucket) List(prefix string) ([]string, error) {
	return b.bucket.List(prefix)
}

// Exists checks if a file exists in the bucket (always available)
func (b *{{$bucket.PascalCase}}Bucket) Exists(key string) (bool, error) {
	return b.bucket.Exists(key)
}

// GetDownloadURL returns a presigned URL for downloading a file (always available)
func (b *{{$bucket.PascalCase}}Bucket) GetDownloadURL(key string, opts ...suga.PresignUrlOption) (string, error) {
	return b.bucket.GetDownloadURL(key, opts...)
}

// GetUploadURL returns a presigned URL for uploading a file (always available)
func (b *{{$bucket.PascalCase}}Bucket) GetUploadURL(key string, opts ...suga.PresignUrlOption) (string, error) {
	return b.bucket.GetUploadURL(key, opts...)
}
{{end}}

// Client provides access to suga application resources
type Client struct {
	{{range $bucket := .Buckets}}{{$bucket.PascalCase}} *{{$bucket.PascalCase}}Bucket
	{{end}}
}

// NewClient creates a new set of all bucket clients
func NewClient() (*Client, error) {
	address := os.Getenv("SUGA_SERVICE_ADDRESS")
	if address == "" {
		address = "localhost:50051"
	}

	cc, err := grpc.NewClient(address, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		return nil, fmt.Errorf("failed to connect to runtime server: %w", err)
	}
	
	{{ if .Buckets }}
	storageClient := storagepb.NewStorageClient(cc)
	{{ end }}

	return &Client{
		{{range $bucket := .Buckets}}{{$bucket.PascalCase}}: &{{$bucket.PascalCase}}Bucket{bucket: suga.NewBucket(storageClient, "{{$bucket.Unmodified}}")},
		{{end}}
	}, nil
}